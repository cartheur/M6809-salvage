( GOING FORTH DOCUMENTATION )                                        This Software package has been put together to allow       a beginning FORTH programmer to come up to speed on the         FORTH programming approach in the most efficient manner.        It contains a comprehensive Computer Aided Instruction          Course, a general HELP utility, and sample programs.               Care has been taken to avoid any hardware dependancies       which would complicate transportability between systems         which conform to the FORTH Intrest Group Common Model. In order to fit onto one 5 1/4 inch diskette it has been trimmed slightlyby deleting the FIG EDITOR.  It presumes that the user has the  FIG EDITOR already loaded, and it switches to that vocabulary   by simply the word 'EDITOR' when it is needed.                     The information contained on this disk is a slightly modifiedversion of the original GOING FORTH disk, the contents of which were Copyrighted in 1980 by Creative Solutions  [ENTER-> 1 LIST]( GOING FORTH DOCUMENTATION )                                   of Silver Spring Md, and may not be copied and transfered       to any third party without express written consent              from a representative of Creative Solutions. Your honesty       concerning this matter is essential to ensure the availibility  of low-cost quality software. Good Authors Deserve Royalties!      We (KENYON and TALBOT MICROSYSTEMS) pay CREATIVE SOLUTIONS   royalties for each copy we distribute, and it is part of your   license agreement with us that you honor CREATIVE SOLUTIONS's   copyright.                                                           Screens     Description                                          2- 3       'GOING FORTH' CAI course                             4-74       'GOING FORTH' source screens                        75-86       'HELP' utility                                 To run GOING FORTH, load your EDITOR, place this diskette into  drive 1 and type DR1 2 LOAD                      ;S RJT 80/11/04( GOING FORTH CAI COURSE )                                      FORTH DEFINITIONS CR ." Loading EDITOR  if not already loaded."             CR    EDITOR FORTH DEFINITIONS  DECIMAL              : GOING ;                                                      4  CONSTANT FIRST-SCREEN   0 VARIABLE CURRENT-SCREEN            0 VARIABLE CLR-ARRAY  8 ALLOT  ( HOLDS CHARACTER SEQUENCE )     : @CLR-SEQ   CLR-ARRAY DUP  10 ERASE  8 EXPECT   ;              : CLEAR   CLR-ARRAY 8 TYPE  25 0  DO  0 EMIT  LOOP ;            ." Please enter the character sequence which will clear" CR     ." the screen and home the cursor on your particular video" CR  ." terminal or eject a page on a hard-copy terminal," CR        ." followed by a carrige return" CR CR       @CLR-SEQ                                                                           : WHAT  CLEAR FIRST-SCREEN CURRENT-SCREEN @  0 MAX + LOAD ;     : BACKUP   -1 CURRENT-SCREEN +!  WHAT ;                         : GO    1 CURRENT-SCREEN +!   WHAT ;   -->       ;S RJT 80/11/04( CAI ASSIST WORDS)                                             : S?  ( PRINT STACK)  CR SP@  S0 @  SWAP   OVER OVER = 0=           IF   DO FORTH I @ 6 .R  CR 2 +LOOP                                 ELSE   DROP DROP  ." EMPTY" CR  THEN ;                                                                                   : \    ( PRINT LINE)  92 TEXT  PAD  COUNT  TYPE  CR ;           : \\   ( \ WITH 2 CR)  \ CR  ;                                  : GOT-IT   2 CURRENT-SCREEN +!  WHAT  ;                         : 'FRAME  FIRST-SCREEN +   ;                                    : FRAME   CURRENT-SCREEN !  WHAT  ;                                                                                             : CONTENTS 'FRAME SWAP 'FRAME SWAP   CR   1+ SWAP                    DO CR 0 I .LINE                                                 ?TERMINAL  IF LEAVE THEN   LOOP ;                           : NOTHING ;    75  LOAD     ( HELP SCREENS )                   : MARKER ;   0 FRAME                             ;S RJT 80/11/04( GOING FORTH FRAME INDEX)                                      \ ********************************************************\     \ *                                                      *\     \ *                 ' GOING FORTH '                      *\     \ *        A COMPUTER AIDED INSTRUCTION COURSE           *\     \ *                                                      *\     \ *                      from                            *\     \ *                                                      *\     \ *                CREATIVE SOLUTIONS                    *\     \ *    14625 TYNEWICK TERRACE SILVER SPRING MD  20906    *\     \ *    modified for tFORTH & 68'FORTH by RAY TALBOT      *\     \ *    KENYON MICROSYSTEMS      TALBOT MICROSYSTEMS      *\     \ *    3350 WALNUT BEND         5030 KENSINGTON WAY      *\     \ *    HOUSTON TX 77042         RIVERSIDE CA 92507       *\     \ ********************************************************\     CR CR CR \ Enter Carriage Return to continue. \ KEY DROP GO     \\ FRAME #1    WELCOME  TO  GOING  FORTH   \                    \ This system has been designed to help you learn the \         \ fundamental concepts of the programming approach known\       \\ as FORTH. \                                                  \ Initially written by Charles Moore over 10 years\             \ ago, FORTH represents a fourth generation combination\        \ of proven programming practices giving perhaps the most\      \\ powerful programming approach ever created.\                 \ This course is organized into four lessons, each lesson\      \ exploring a basic concept of FORTH.  At the conclusion\       \\ of this course, we will attempt our first FORTH program.\    \ Enter the Carriage Return (CR) to proceed.\                   KEY DROP  GO ;S                                                                                                                                                                                                                                  ;S RJT 80/11/04\\ FRAME #2    MY INTENTIONS SIR?   \                           \ We have adopted a somewhat frisky approach to the\            \ presentation of the following material.  This is due\         \ to our firm belief, however contrary to those of most\        \ contemporary educational institutions, that learning\         \\ a new computer language can and should be FUN!\              \ The only tools required to complete this course are\          \ your natural creative and intuitive talents, and a\           \\ humane posture towards our obvious human weaknesses.\        \ One further caution,  the power of FORTH is derived\          \ primarily from the unique COMBINATION of a group of\          \ very simple concepts.  Be careful not to let your\            \ backround complicate a fundamentally simple concept\          \ or discount its value.  In FORTH, power is a product\         \\ of simplicity.\                                              \ Enter (CR) to continue.\ KEY DROP GO           ;S RJT 80/11/04\\ FRAME #3    COARSE OUTLINE   \                               \   I. BACK TO BASICS\                                          \      - Communicating Back & FORTH          (Introduction)\    \      - But WORDS Will Never Hurt You (What FORTH expects) \   \      - Hey, STACKS!              (The concept of a stack)\    \\      - Math Myths                  (Arithmetic operators)\   \  II. DEFINITIONS\                                             \      - My WORD!                 (Building your own words)\    \      - Life Without GOTO         (Block structured logic)\    \\      - VARIABLE CONSTANTS               (Data structures)\   \ III. PROGRAM ENTRY AND DISPLAY * SORRY, THIS HAD TO BE  \     \      - Rapture Capture    (Text editor)  OMITTED TO MAKE 5"\  \\      - Rapture, Rapture, Rapture (Printing utilities)\       \\  IV. PROGRAM DEVELOPMENT\ CR                                 \ Enter (CR) to continue.\  KEY DROP GO                                                                          ;S RJT 80/11/04\\ FRAME #4    SO ON AND SO FORTH   \                           \ You may be somewhat familiar with certain concepts\           \ about FORTH and want to proceed on to the next frame.\        \ But, some concepts may require your taking a second\          \\ look at a particular frame.\                                 \ We are providing you the following capabilities to control\   \ the frame presentation sequence:\                             \ BACKUP           Displays the previous frame\                 \ WHAT             Re-displays the current frame\               \ (frame #) FRAME  Picks up from any prior frame\               \\ GO               Proceeds to the next frame\                 \ We suggest that you either write down or memorize\            \ the above commands for further reference.\                    \ For example, enter 'WHAT' and the (CR).  After this\          \ frame has been re-displayed, enter 'GO' and we'll\                    \ go forth!\   ;S                                       \\ FRAME #5    LESSON 1 - BACK TO BASICS   \                                                                                    \\ - Communicating Back & FORTH          (Introduction)\        \\ - But WORDS Will Never Hurt You (What FORTH Expects)\        \\ - Hey, STACKS!             ( The concept of a stack)\        \\ - Math Myths                  (Arithmetic operators)\                                                                        \ The objective of this lesson is to introduce you to\          \\ the environment in which FORTH operates.\                    \ Enter 'GO' to continue.\            ;S                                                                                                                                                                                                                                                                                                                                                                                                                        \\ FRAME #6    I'M OK YOU'RE OK   \                             \ The keyboard provides you with a convenient way to \          \ communicate with FORTH.  The display is FORTH's way to\       \ communicate with you.\                                        \ You must terminate your request to FORTH by entering the\     \ carriage return control character (CR), the 'RETURN' key.\    \ This informs FORTH that you want your request processed.\     \ FORTH then processes your request and responds with\          \\ 'OK'.\                                                       \ If FORTH is unable to process your request, the word causing\ \ the problem is printed, followed by a '?', and often\         \ the reason why.\                                              \ For example, enter just (CR) and see FORTH merrily\           \ acknowledge your request to do nothing with 'OK'.\            \ Let's 'GO' on.\                                               ;S                                                              \\ FRAME #7    WHEN FORTH DOES NOT UNDERSTAND   \               \ FORTH is generally very understanding.  That is, until\       \\ you improperly enter a request.\                             \ For example, misspell 'WHAT' while entering it below \        \\ ( like 'WHUT').\                                             \ Since forth wasn't able to perform your request,\             \ it printed your misspelled word and a '?' and is waiting\     \\ for another try. Spell it right, and FORTH will comply.\     \ Lets 'GO' ont is important to mention the non-volatility of FORTH.\      \ FORTH allows you to make most mistakes without causing any \  \\ significant change to the system.  \                         \ When a request is entered improperly, FORTH lets you know \   \ by printing your request back, along with a '?' and an \      \\ error message. \                                             \ Simply re-enter it until you get it right, which FORTH\       \ acknowledges by 'OK'.  The backspace or delete key allows the\  \\ capability to correct any incorrect character(s).\         \ Try it out by typing several characters below :and \         \ backspacing them away.\                                       \ Let's 'GO' on to discuss how FORTH expects you to make\       \ requests.\                                                    ;S                                                                                                               ;S RJT 80/11/04\\ FRAME #9    GREAT EXPECTATIONS   \                           \ FORTH expects you to enter your request as a series of words.\                                                                \ A WORD to FORTH is just a string of characters \              \\ separated by at least one space or the (CR) .\               \ For example:\ \ ENTER ->   NOTHING NOTHING NOTHING\           \ For the purposes of this example, we previously defined the\  \ word NOTHING to do nothing, so FORTH quite happily did\       \\ nothing three times.\                                        \ Go ahead and enter 'WHAT' a couple of times on the\           \ same line.  When you are tired of seeing this frame\          \ re-displayed, enter 'GO' once.\                               ;S                                                                                                                                                                                                                                               ;S RJT 80/11/04\\ FRAME #10   YOU'RE AS GOOD AS YOUR 'WORD'   \                \\ A WORD may have a maximun of 31 characters.\                 \ You may want to include more than one space between\          \\ words for clarity, but you must have at least one space.\    \ Let's enter something that FORTH doesn't understand: \        \\ ENTER ->  SOMETHING\                                         \ It should be apparent that the word 'SOMETHING' is\           \ unknown to FORTH.  We will learn how to create new words \    \ in later frames.  Please 'GO' on.\                            ;S                                                                                                                                                                                                                                                                                                                                                                                                                                               ;S RJT 80/11/04\\ FRAME #11   THE NUMBERS GAME   \                             \\ A NUMBER is just like any other word to FORTH.\              \ When we refer to numbers, we mean whole numbers,\             \\ both positive and negative.\                                 \ When a word is entered, FORTH examines it for processing.\    \ If it is a number, FORTH will hold onto it and say\           \\ 'OK'.\                                                       \\ Let's enter a number:\                                       \\ ENTER ->  5\                                                 \ Where is our number?  Let's 'GO' on to find out.\             ;S                                                                                                                                                                                                                                                                                                                                                                                              \\ FRAME #12   I'VE GOT YOUR NUMBER   \                         \\ A number may be displayed numerous ways.\                    \ The word called DOT, always entered as '.',\                  \ allows you to print the number most recently\                 \ entered.  Printing a number removes the number\               \\ permanently from the stack.\                                 \ Let's print the number which we entered in the prior\         \ frame.\                                                       \\ ENTER -> .\                                                  \\ Consider another example:\                                   \ ENTER ->  6 .  7 .\                                           \ We may combine multiple requests on a single line.\           \ Remember to include at least one space between words.\        \ Please 'GO' forth.\                                           ;S                                                                                                               ;S RJT 80/11/04\\ FRAME #13   THE CONCEPT OF A STACK   \                       \ When FORTH holds onto a number, it stacks them one on top of  \\ the other similar to a stack of plates in a cafeteria.\      \ If you place 3 plates one on top of the other, and then \     \ reach for one, the top plate, (or last one stacked)\          \\ is the easiest to pick up.  \                                \ Try stacking three numbers: \                                 \ ENTER ->      1 2 3\                                          \\ These numbers are stored on a stack that looks like this:\      \       3\ \       2\ \\       1\                            \ Lets 'GO' on to discuss how we remove these numbers\          \ from the stack.\                                              ;S                                                                                                                                                                                                                                               ;S RJT 80/11/03\\ FRAME #14   LET'S TAKE IT FROM THE TOP   \                   \\ When you enter numbers, they are placed on a stack.\         \ FORTH always acts on the top of the stack first.\             \ Therefore, the LAST number entered is the FIRST number\       \\ printed.\                                                    \ Let's print the three numbers that we stacked in the\         \ prior frame. (Remember to include spaces between words!)\      \ ENTER ->  . . .\                                             \ Again, notice that the '3' was the last number stacked\       \\ and, therefore, the first printed.\                          \ Furthermore, since the 'DOT' command removes the number\      \ from the stack, our stack is now empty.  Please 'GO' on.\     ;S                                                                                                                                                                                                                                               ;S RJT 80/11/03\\ FRAME #15   LIVING WITHIN YOUR MEANS   \                     \ For all practical purposes, the stack can be considered\      \\ to be endless.\                                                                                                              \ FORTH will inform you if you try to remove something\         \ from an empty stack, or in the unlikely event of it\          \\ becoming full.\                                                                                                              \ So, don't be suprised to see garbage when you ask for\        \\ something that doesn't exist.\                                                                                               \ Please 'GO' on.                                               ;S                                                                                                                                                                                                                                                              \\ FRAME #16   DON'T BLOW YOUR STACK   \                        \ You cannot remove more numbers from the stack than you\       \ put on.  In the event that you try, FORTH informs\            \ you that you've blown your stack!\                            \ Let's intentionally blow our stack by trying to print\        \ more numbers than we put on.\                                 \ ENTER ->     1 2 3   . . . .\                                 \ We placed three numbers on the stack, but attempted \         \\ to remove four.\                                             \ FORTH printed what was on the stack.  Unable to perform\      \ the last '.', FORTH printed garbage, explaining that the\     \\ stack was empty.\                                            \ Please 'GO' on.\                                              ;S                                                                                                                                                                               ;S RJT 80/11/04\\ FRAME #17   THE FACTS OF LIFO   \                            \ It is important to remember that the LAST number entered is \ \ the FIRST number used.  That's LIFO! (Last in = First out).\  \\ Suppose we enter multiple requests on a single line.\        \ Does an error in one of the requests stop further \           \\ processing of the following requests?\                       \ Yes!  Consider an example:\       SP!                         \ ENTER ->     1  2  .  .  .  3  .  4  .\                       \\ FORTH processes this request until an error is encountered.\  \ At this point, FORTH terminates any further processing\      \\ of the succeeding requests.\                                 \ Please 'GO' on.\                                              ;S                                                                                                                                                                                                                                               ;S RJT 80/11/04\\ FRAME #18   SMART 'S?'   \                                   \\ Suppose we wanted to see the contents of the stack.\         \ We could use the word '.', but that would destroy them.\      \ For this course we defined a useful tool, the word 'S?' .\    \ 'S?' displays the contents of the stack and informs\          \\ you when it is empty.\       SP!                             \\ ENTER ->     1 2 3 4 5 S?\                                   \ 'S?' is a very useful command.  It may be used at any\        \\ time to verify the contents of the stack.\                    \\ Let's clear our stack:\                                     \\ ENTER ->     .  .  .  .  .\                                  \ Our stack should be empty.  Verify this with S?\              \ Please 'GO' forth.\                                           ;S                                                                                                                                                                               ;S RJT 80/11/04\\ FRAME #19   FORTH AND ARITHMETIC   \                                                                                         \ FORTH works with whole numbers only.  The conventional\       \ operators are '+' for add, '-' for subtract, '*' for\         \\ multiply, and '/' for divide.\                               \ FORTH acts on the most recently entered number first\         \ and then the second most recently entered number on \         \\ the stack.\                                                  \ These numbers are removed from the stack, the opera-\         \ tion is performed, and the result is placed on the\           \\ Top Of the Stack (TOS).\                                     \ Let's 'GO' on to discuss addition.\                           ;S                                                                                                                                                                                                                                               ;S RJT 80/11/04\\ FRAME #20   SUM TIMES   \                                    \ When FORTH performs addition, it removes the top two\         \ items from the stack, adds them together, and places\         \\ the sum on the top of the stack.\                            \ For example, to add '5' and '6':\                             \ ENTER ->     5  6  +\                                         \ The contents of the stack is now '11'.  Verify this\          \\ with S?\                                                     \ Let's add '4' to this value and print the sum:\               \ ENTER ->     4  +  .\                                         \ FORTH removed the '11' and '4', added them together, and\     \ placed the sum on the TOS.  FORTH then printed the '15' and\  \\ removed it from the stack.\                                  \ Let's 'GO' on to subtraction.\                                ;S                                                                                                               ;S RJT 80/11/04\\ FRAME #21   WHAT'S THE DIFFERENCE   \                        \ FORTH subtracts the number on the TOS from the number\        \\ beneath it.\                                                 \\ It is simpler than it sounds.\                               \ The notation for '8 MINUS 6' is '8 6 -'.\                     \ For example:\                                                 \ ENTER ->     8  6  -  .\                                      \ The '6' and '8' are removed from the stack.  The \            \ '6' is subtracted from '8'.  The difference '2' is\           \\ returned to the stack, until you print it.\                  \\ Remember, printing a number removes it from the stack.\      \ Let's 'GO' on to multiplication.\                             ;S                                                                                                                                                                                                                                               ;S RJT 80/11/04\\ FRAME #22   GO FORTH AND MULTIPLY   \                        \\ Multiplication is quite simple.\                             \ The notation for '2 TIMES 3' is '2 3 *'.\                     \ ENTER ->     2 3 *\                                           \\ We get a '6' on the TOS.\                                    \ Let's verify these results without destroying the contents\   \ of the stack for our next example:\                           \ ENTER ->     S?\                                              \ Now let's multiply the TOS by '4'.\                           \ ENTER ->     4  *  .\                                         \ The result is '24'.  The '6' on the stack is multiplied\      \ by the '4' we entered.\                                       \ Division is a bit more complicated.  Please 'GO' on.\         ;S                                                                                                                                                                               ;S RJT 80/11/04\\ FRAME #23   THE GREAT DIVIDE  \                              \ FORTH divides the number on the TOS into the number\          \ beneath it.\                                                  \ The notation for '12 DIVIDED BY 6' is '12 6 /'.\              \ For example:\                                                 \ ENTER ->     12  6  /  .\                                     \ The result is '2' since '12' is evenly divided by '6'.\       \ Since FORTH only works with whole numbers, the result\        \\ of the division is truncated to a whole number.\             \ For example:\                                                 \ ENTER ->     15  6  /  .\                                     \ The result is also '2'.\                                      \ Suppose we needed to know the remainder in a division\        \ problem?  'GO' on to find out.\                               ;S                                                                                                               ;S RJT 80/11/04\\ FRAME #24   IT'S A MOD, MOD WORLD   \                        \ We can retain the remainder in a division problem by using\   \ 'MOD'.  The notation is similar to division. We obtain the \  \\ remainder of '15 divided by 6' as follows:\                  \\ ENTER ->     15  6  MOD .\                                   \\ This produces a '3'.\                                        \ Suppose we needed to know both the remainder and the \        \\ quotient?\                                                   \ Let's 'GO' on to see how this is accomplishedn our discussion of division, we used '/' to find the\       \\ quotient, and 'MOD' to find the remainder.\                  \\ To find both we use '/MOD'.\                                 \\ For example:\                                                \\ ENTER ->     15  6  /MOD  .  .\                              \ This returns the quotient to the TOS and the remainder\       \\ beneath it.\                                                 \ Let's 'GO' on to combine some of the arithmetic operations.\  ;S                                                                                                                                                                                                                                                                                                                                                                                                                                                              \\ FRAME #26   THAT SUMS IT UP   \                              \ Up to this point, the arithmetic operations were \            \ handled one by one.  What happens when operations\            \ are combined? \ \ ENTER ->          2 4 6 + * .\              \ Remember, FORTH acts on the most recently entered \           \ number first then the second most recently entered \          \ number.  The numbers are stacked in the input order until\    \ the first operator, '+', is encountered.\                     \ The '4' and '6' are added together, and the result\           \ '10' is now on the top of the stack, with the '2' still\      \ beneath it.  '*' multiplies '2' by '10' and leaves the\       \\ contents of the stack as '20'.\                              \ Lets try another example:   ( 4+6 ) / 2 \                     \ ENTER ->    4 6 + 2 / .\                                      \ Let us 'GO' on to learn how to manipulate the stack.\         ;S                                               ;S RJT 80/11/04\\ FRAME #27   FORTH HELPS THOSE WHO HELP THEMSELVES\           \ Now that our FORTH vocabulary is growing, we may need\        \ some help in remembering the definition of a word that\       \\ was explained a few frames back.\                            \ If this were a book, we would flip through the Table of\      \ Contents for a handy reference, or we would check the\        \ the Glossary for its definition.  Take your pick, we have\    \\ provided both.\                                              \ The frame Table of Contents can be seen by giving a starting\ \\ frame# and an ending frame# and the word 'CONTENTS'.\        \\ Let's look at the titles of the first seven frames:\         \\ ENTER ->   1 7 CONTENTS \                                    \ Let's 'GO' on to learn more about the Glossary.\              ;S                                                                                                                                                                               ;S RJT 80/11/04\\ FRAME #28   A SECOND HELPING   \                             \ We have also provided you the ability to display the\         \\ definition and function of any standard FORTH word.\         \\ Suppose you forgot the meaning of '/MOD'.\                   \\ ENTER ->     HELP /MOD\                                      \\ To learn more about 'HELP':\                                 \\ ENTER ->     HELP HELP\                                      \\ Remember that you can re-display this screen with 'WHAT'.\   \ So, now we can 'HELP' ourselves.  PLease 'GO' on.\            ;S                                                                                                                                                                                                                                                                                                                                                                                                                                                              \\ FRAME #29   OPERATOR, GIVE ME INFORMATION   \                \ The following is a list of words that \                       \\ manipulate the stack:\ CR                                    \     DUP      Copies top of the stack\                         \     SWAP     Reverses top 2 numbers on stack\                 \     DROP     Destroys top number on stack\                    \     OVER     Copies 2nd number to top of stack\               \     ROT      Moves 3rd number to top of stack\                \     ABS      Absolute value of top of stack\                  \     MAX      Saves only the LARGER of the top 2 numbers\      \\     MIN      Saves only the SMALLER of the top 2 numbers\    \ Now let's put some of these manipulators to use.\             \ Please 'GO' forth.\                                           ;S                                                                                                                                                                               ;S RJT 80/11/04\\ FRAME #30   FAST OPERATORS   \                               \ Let's try some of these stack operators.\                     \ 'DUP' copies the top of the stack.\                           \ For example:\                                                 \\ ENTER ->     5  DUP  .  .\                                   \ 'SWAP' reverses the top two numbers on the stack.\            \ For example: \                                                \\ ENTER ->     8  4\                                           \\ Let's print them BEFORE and  AFTER the 'SWAP':\              \ ENTER ->     S?  SWAP  S?\                                    \ Now clear the stack:\                                         \ ENTER ->     .  .\                                            \ Please 'GO' on.\                                              ;S                                                                                                                                                                               ;S RJT 80/11/04\\ FRAME #31   DROP OVER & ROT   \                              \ Now we can try some of the other stack operators.\            \\ ENTER ->   2 3 DROP .\                                       \ The result is '2', since we DROPPED the top of the \          \ stack '3'.\ \\ ENTER ->   5 10 OVER . . .\                    \ We now get '5 10 5', since the second number was copied\      \\ to the top of the stack.\                                    \ The 'ROT' operator ROTATES the 3rd number to the top of\      \ the stack.\ \\ ENTER ->   2 4 6 ROT . . .\                    \ We  get '2 6 4'.  Please 'GO' on.\                            ;S                                                                                                                                                                                                                                                                                                                                                                               ;S RJT 80/11/04\\ FRAME #32   COMBOS   \                                       \ After we become familiar with both the arithmetic\            \ operators and the stack manipulators, we will be able \       \\ to create our own combinations.\                             \\ Let's double a number:\                                      \\ ENTER ->   3 DUP + .\                                        \\ Or, square a number:\                                        \\ ENTER ->   3 DUP * .\                                        \ Let's 'GO' on to discuss a more convenient way to use\        \ the stack operations.\                                        ;S                                                                                                                                                                                                                                                                                                                                                                                              \\ FRAME #33   LESSON 1 - SUMMARY   \                           \ Sit back and relax!  This is a good point to take\            \\ a break, and consider what has been presented.\              \\ You should now be familiar with the following concepts:\     \ - How FORTH expects you to enter requests\                    \ - What FORTH does when it does not understand a request\      \ - Entry and display of numbers\                               \ - The concept of a stack\                                     \ - FORTH's approach to arithmetic\                             \ - Stack manipulation operators\                               \\ - How to ask for and receive HELP\                           \ If you do not fully understand any of the above concepts,\    \ 'GO' on and you will be shown how to go back and repeat\      \ a section, otherwise enter 'GOT-IT' and we will go on\        \ to Lesson 2.\                                                 ;S                                               ;S RJT 80/11/04\\ FRAME #34   LESSON 1 - REVIEW   \                            \ We will review the frame titles for Lesson 1.  Select the\    \ title which is in the area which you would like to \          \ review and enter the frame number when requested.  This \     \ will restart the presentation on that frame.  Feel free to\   \\ create your own examples to help in understanding.\          \\ To review Lesson 1 titles:\                                  \\ ENTER -> (CR)\                                               KEY DROP                                                         0 33   CONTENTS CR                                             \ ENTER  frame# and word 'FRAME' for desired review point,\     \ or if you decide you do not need review, type GO.\            \ If during review you decide to pick up back here,\            \ ENTER ->   35 FRAME\                                          ;S                                                                                                               ;S RJT 80/11/04\\ FRAME #35   LESSON 2 - DEFINITIONS   \                       \\ - My WORD!                 (In your own words)\              \\ - Life without GOTO   (Block structured logic)\              \\ - VARIABLE CONSTANTS         (Data structures)\              \ The objective of this lesson is to introduce the\             \ concept of EXTENSIBILITY as the primary method of\            \\ writing FORTH programs.\                                     \ Enter 'GO' to proceedprovides you with a way to print literals by using\     \\ the 'DOT-QUOTE' word (period quotation marks).\              \ The quote word is followed by exactly 1 space, and then\      \ the text.  The end of the text is delimited by a\             \\ quotation mark.\                                             \\ For example, to print a name:\                               \ ENTER ->     ." JOE FORTH, IV" \                              \\ Entering the (CR) caused the text to execute immediately.\   \ Let's 'GO' on.\                                               ;S                                                                                                                                                                                                                                                                                                                                                                                              \\ FRAME #37   I SHALL RETURN   \                               \\ Suppose we wanted to print text on several lines.\           \ We use 'CR' (carriage return) to do this.  'CR' will\         \ return the carriage to the left margin and down 1 line.\      \ The word 'SPACES' is also used in formatting, to \            \\ insert spaces between text.\                                 \ Let's create an inventory report.  Consider\                  \\ the following example to print the column headers:\          \\ ENTER -> CR  ." STOCK#" 10 SPACES ." DESCRIPTION" CR \       \ Let's 'GO' on.\                                               ;S                                                                                                                                                                                                                                                                                                                                                                                              \\ FRAME #38   WHAT'S IN A NAME?   \                            \\ FORTH's power lies in its ability to define new words.\      \ Suppose you frequently want to add two numbers and\           \ print the sum.  Instead of always typing '+' and '.' for\     \ each operation, we could define a word:\                      \ ENTER ->    :     PLUS   +  .  ;\                             \ function-     :        A colon begins a definition\           \               PLUS     The name of the word you are defining\ \               .        WORDS executed when 'PLUS' is invoked\ \               ;        A semicolon ends a definition\         \ Remember to separate ':' and ';' from other words\            \\ with spaces.\                                                \ Notice that after you entered (CR)  nothing happened.  FORTH\ \ merely put this definition in its dictionary.  Let's\         \ 'GO' on to use this new word we have defined.\                ;S                                               ;S RJT 80/11/04\\ FRAME #39   MY WORD!   \                                     \\ To use the new word 'PLUS' which we have just created:\       \\ ENTER -> 5 1 PLUS\                                          \ Upon encountering the new word 'PLUS', FORTH looked it\       \ up in the dictionary, and determined that the words\          \\ '+' and '.' should be executed.\                             \ Notice that there is no difference in usage between\          \ a word which you create and a word which already exists\      \ in the FORTH dictionary.  As a matter of fact, most of \      \ the words in the standard FORTH dictionary were created  \    \\ using exactly the same technique as we used for 'PLUS'.\     \ Please 'GO' on.\                                              ;S                                                                                                                                                                                                                                               ;S RJT 80/11/04\\ FRAME #40   THE GOOD, THE BAD, AND THE UGLY   \              \ We cannot stress enough the importance of using\              \\ meaningful names when defining words.\                       \ The time spent in selecting relevant, consistant, meaningful\ \ and descriptive names will greatly simplify your program\     \\ debug and maintenence efforts!\                              \ For example, you may want to identify all words that\         \ print literals with a '.' in the name.\                       \ Good examples:\                                               \   : .DASH ." -" ;\                                            \   : .BYLINE ." ANOTHER FINE PRODUCT OF BOTCH, INC." ;\        \ Bad example:\   \   : A-LINE ." THE STARSHIP ENTERPRISE" ;\       \ Ugly example:\                                            \\  : TN5  ." 5" ;\                                             \   Please 'GO' forth.\                                         ;S                                               ;S RJT 80/11/04\\ FRAME #41   GETTING REDEFINED WORDS SQUARED AWAY   \         \ Let's define a word to square a number:\                      \ ENTER ->   : SQUARE DUP * ;\                                  \\ Using this word, we could define a word to cube a number:\   \ ENTER ->   : CUBE DUP SQUARE * ;\                             \ Now, suppose you redefine SQUARE to print the number of\      \ sides a square has.\                                          \ ENTER ->   : SQUARE 4 . ;\                                    \\ However, this new definition of SQUARE will not affect\      \ its use in the previously defined word 'CUBE'.\               \ ENTER ->   SQUARE \ \\ ENTER ->   2 CUBE .\                   \ Words may be defined and redefined.  Ready to 'GO' on?\       ;S                                                                                                                                                                                                                                               ;S RJT 80/11/03\\ FRAME #42   A LA MODES   \                                   \\ FORTH operates in two modes:  EXECUTION and COMPILATION.\    \ In EXECUTION mode, each word of input is looked up in the\    \ dictionary and executed.\                                        \ ENTER ->   5 DUP . .\                                      \ This  executes immediately.\                                  \ During COMPILATION, words are not executed but\               \ are established as definitions in a dictionary.\              \ ENTER ->     : 2FIVES 5 DUP . . ;\                            \ Once the word is defined (compiled) into the dictionary,\     \ it may be executed by entering its name.\                     \\ ENTER ->   2FIVES\                                           \ Let's 'GO' forth.\                                            ;S                                                                                                                                                                               ;S RJT 80/11/04\\ FRAME #43   NO COMMENT!   \                                  \ We should use COMMENTS liberally to enhance the \             \ readability of our programs.\                                 \ COMMENTS may be placed on any line of text between \          \ '(' and ')'.\                                                 \ Remember to include a space after the left parenthesis,\      \\ as it is actually a FORTH word. \                            \ Consider some examples:\                                      \   : HEADERS ." INVOICE #" 5 SPACES ." QTY" ; ( INVOICE) \     \                                        ( COLUMN HEADER)\      \   : CUBE DUP DUP * * ;                 ( CUBE A NUMBER)\      \ COMMENTS are commonly used to indicate non-obvious word\      \ functions, expected and returned stack contents, as well\     \ as to identify program authorship and dates.\                 \ Please 'GO' on.\                                              ;S                                               ;S RJT 80/11/04\\ FRAME #44   LOOP: SEE LOOP   \                               \ 'LOOP' causes a sequence of words to be repeated a\           \ specified number of times.\                                   \ A 'LOOP' must be executed within a definition.\               \ Consider the following example to print 5 numbers\            \ from the stack:\                                              \ ENTER ->     : TAKE-FIVE  6  1  DO  .  LOOP ;\                \ 'DO' stores the initial value and limit. 'LOOP' increments\   \ the value and branches back to 'DO' until the limit is\       \ reached.  For example:\                                       \\ ENTER ->     1 2 3 4 5 6 7 TAKE-FIVE\                        \ Let's clear the stack:\ \\ ENTER ->     .  .\                 \ Let's 'GO' on and loop awhile. \                              ;S                                                                                                                                                                               ;S RJT 80/11/04\\ FRAME #45   LOOP HOLES   \                                   \ We may also define a general 'LOOP' and specify the number\   \\ of times it is repeated at the time it is executed.\          \\ For example, we may define a word to print an asterisk:\    \\ ENTER ->     : STARS  0  DO  ." *" LOOP ;\                   \ Then, we specify the number of times we want it repeated\     \\ by providing the limit when it is executed:\                 \\ ENTER ->     15 STARS\                                       \ Please 'GO' forthften it is useful to have a word to access the iteration\    \ counter.  FORTH provides it to you with 'I'.\                 \ Consider the loop to print numbers from 1 to 10:\             \ ENTER ->     : TEN-#'s 11 1 DO I . LOOP ;\                    \ ENTER ->     TEN-#'s\                                         \ You get ' 1 2 3 4 5 6 7 8 9 10'.\                             \ Or, you may wait until execution time to define the\          \ iteration counter.  For example:\                             \ ENTER ->     : PRINT-#'s DO I . LOOP ;\                       \ ENTER ->     11 1 PRINT-#'s\                                  \ This gives you the same results.  Let's 'GO' on. \            \ More loops are forthcoming.\                                  ;S                                                                                                                                                                               ;S RJT 80/11/03\\ FRAME #47   LIFE INSIDE A LOOP   \                           \ So far, we have discussed incrementing the 'LOOP'\            \ by '1'.  The FORTH word '+LOOP' allows different values \     \\ to be used to advance the counter when looping.\             \ Consider the definition to print odd numbers:\                \ ENTER ->     : ODD 10 1 DO I . 2 +LOOP ;\                     \ The first time through the loop, 'I' is equal to '1'\         \ the starting value of the loop.  Now, '2' is added to the\    \ counter.  The counter is now '3'.  Again, '2' is\             \\ added until our limit (10) is reached or passed.\            \ Let's execute ODD:\                                           \ ENTER ->     ODD\                                             \ The results are '1 3 5 7 9'.  Let's 'GO' on to see\           \ another way to use the '+LOOP'.\                              ;S                                                                                                               ;S RJT 80/11/04\\ FRAME #48   HOW DO YOU 'DO'?   \                             \ We have learned how to increment using the '+LOOP'.\          \ Another way of using the '+LOOP' is to calculate\             \ the increment at execution time, as in:\                      \ ENTER ->     : DOUBLE 50 2 DO I . I +LOOP ;\                  \ When we execute:\                                             \ ENTER ->     DOUBLE\                                          \ The loop starts out by printing the value of 'I' and\         \ adding that value to the counter.  Each  time through the\    \\ loop, the counter is printed and added to itself (doubled).\ \ This concludes our discussion of the 'DO LOOPS'.\             \ Try a few examples of your own to familiarize yourself\       \ with the variations available.\                               \ Let's 'GO' on to discuss conditionals.\                       ;S                                                                                                               ;S RJT 80/11/04\\ FRAME #49   LIVING WITH YOUR RELATIONALS   \                 \ Relational operators take values from the top of the stack\   \ (TOS), test a relationship, and and leave some result\        \ on the stack.\                                                \ A TRUE condition leaves a '1', FALSE a '0'.\                  \ The following are relational operators:\                      \ 0=     If TOS equals zero, it leaves '1', else '0'. \         \ 0<     If TOS is less than zero, it leaves '1', else '0'.\    \ 0>     If TOS is greater than zero, it leaves '1', else\      \        it leaves '0' . Your FORTH may not have a 0> defined;\ \        you can make one with : 0> MINUS 0< ; \                \ NOT    A logical equivalent to '0=' \                         \\ We will see examples of their usage later.\                  \ Let's 'GO' on to learn about relational comparisons.\                                                                                                                          ;S RJT 80/11/04\\ FRAME #50   MORE OR LESS   \                                 \ In the previous screen we discussed relationals that \        \ tested the top of the stack. The following relational\        \\ operations test the top two stack items.\                    \ These relationals remove the top 2 items which they test,\    \ leaving '1' for TRUE and '0' for FALSE:\                      \     <   If the second item is less that TOS, it leaves '1'\   \     =   If the second item equals TOS, it leaves '1'\         \     >   If the second item is greater than TOS, it leaves '1' \  \ These comparison operators follow their tested values \    \ just as the arithmetic operators do.  For Example:\            \     8 6 <   Tests for 8 less than 6 returning 0 r(FALSE)\   \\     4 3 >   Tests for 4 greater than 3 returning 1 (TRUE)\   \ We will see more of these relationals used later. 'GO'forth.\                                                                                                                  ;S RJT 80/11/04\\ FRAME #51   BRANCHING CAN PUT YOU OUT ON A LIMB   \          \ Conditionals allow some value to be tested and the execution\ \ to proceed based on this test.  Conditionals must only occur\ \ within a word definition. They cannot be executed from the\   \\ keyboard.  The simplest case involves the 'IF' and 'THEN'.\  \ The 'IF' will cause the words between 'IF' and 'THEN' to\     \\ execute provided the TOS is true, ( not zero ).\             \ If the TOS is zero, FORTH will skip ahead to execute the\     \ words following 'THEN'.  For example:\                        \ ENTER ->     : SHOW-ME IF ." TRUE " THEN ." CONTINUE" ; \     \ ENTER ->     1 SHOW-ME\                                       \ You  get 'TRUE CONTINUE', since TOS is true.\                 \ ENTER ->     0 SHOW-ME\                                       \ And you  get 'CONTINUE', since TOS is false. Please 'GO' on.\                                                                                                                  ;S RJT 80/11/04\\ FRAME #52   OR 'ELSE' WHAT?   \                              \ In the previous frame, we saw how to skip ahead based\        \\ on a certain condition.\                                     \ The word 'ELSE' allows one of two branches to be taken.\      \ For example:\                                                 \ ENTER ->     : TRUE-FALSE IF ." TRUE" ELSE ." FALSE" THEN \   \               ."  STOP" ; \                                   \ If TOS is true, words after 'IF' execute; otherwise words \   \ after 'ELSE' execute.  In either case, words after 'THEN'\    \ will execute .\                                               \ ENTER ->     1 TRUE-FALSE\                                    \ And you get 'TRUE STOP'.\                                     \ ENTER ->     0 TRUE-FALSE\                                    \ And you get 'FALSE STOP'.'GO' on to discuss the nested 'IF'.\                                                                                                                  ;S RJT 80/11/04\\ FRAME #53   BRANCHING IN A NESTED 'IF'   \                   \ Locating one conditional within another is called nesting.\   \ Each nesting level must be completely within another, and\    \ may not overlap.\ \\ For every 'IF' you must have a 'THEN'.\  \ Consider the following example:\                              \ ENTER ->   : .1ST  ." FIRST " ;  \                            \ ENTER ->   : .2ND  ." SECOND " ;  \                           \ ENTER ->   : .3RD  ." THIRD " ;    \                          \ ENTER ->   : NEST   5  1   DO           ( TEST LOOP )  \      \ ENTER ->      I  1  =  IF .1ST  ELSE         \                \ ENTER ->      I  2  =  IF .2ND  ELSE         \                \ ENTER ->      I  3  =  IF .3RD  THEN THEN THEN LOOP ; \       \ ENTER ->   NEST  \                                            \ This 'LOOP' checks the iteration counter (I). If 'I' =\       \ '1', then the word '.1ST' is executed. Notice a\              \ 'THEN' for every 'IF'. Lets 'GO' on.\          ;S RJT 80/11/04\\ FRAME #54   UNTIL DEATH DO US PART ...   \                   \\ FORTH provides a conditional using 'BEGIN' and 'UNTIL'.\     \ It is essentially a loop without an iteration counter.\       \ 'BEGIN' marks the beginning of the structure.  'UNTIL' tests\ \ for a true or false TOS.\                                     \ If TOS is false, control is returned to 'BEGIN'. If true,\    \ the words following 'UNTIL' will execute.  For example:\       \ ENTER ->     : NON-ZERO 1 ;\                                  \ ENTER ->     : ONCE BEGIN  5 .   NON-ZERO UNTIL ;\           \ ENTER ->     ONCE\                                            \ This causes the words between 'BEGIN' and 'UNTIL' to\         \ execute once.  ( It will allways execute at least\            \ once, as do the 'LOOPS'.)\                                    \ Warning!!! If you fail to allow a 'BEGIN' ... 'UNTIL'\        \ loop some method to terminate, YOU WILL HANG THE SYSTEM!\     \ Let's 'GO' on to discuss bases.\               ;S RJT 80/11/04\\ FRAME #55   COVER YOUR BASES!   \                            \ FORTH is able to handle input or output of numbers in any\    \ base.  The current base is explicitly controlled with the\    \\ following words.\                                            \ 'HEX'     converts numbers in base 16\                        \\ 'DECIMAL' converts numbers in base 10\                       \\ We can combine base operations.  For example:\               \\ ENTER ->     DECIMAL 10 HEX 10 DECIMAL . .\                  \ This gives '10' and '16' and a BASE to 'GO' forth on.\        ;S                                                                                                                                                                                                                                                                                                                                                                                                                                                              \\ FRAME #56   CONSTANT COMMENTS   \                            \\ If a value is frequently used, you might want to name it.\   \\ Often, the name is easier to recall than the number itself.\  \ A 'CONSTANT' is a named value.  Let's define a constant\     \\ to represent an hourly parking rate:\                        \\ ENTER ->     75 CONSTANT RATE/HR\                            \ This creates a word 'RATE/HR' and assigns it the value\       \\ '75'.  Using this CONSTANT:\                                 \\ ENTER ->     RATE/HR 3 * .\                                  \\ This computes a three hour parking rate. \                   \ Let's 'GO' on to discuss variables.\                          ;S                                                                                                                                                                                                                                                                                                                              \\ FRAME #57   'VARIABLE' CLOUDINESS   \                        \ A variable changes its value frequently.\                     \ The FORTH word 'VARIABLE' names a location whose value is\    \\ likely to change.\                                           \ Consider an example to count the number of parking\           \ spaces used:\                                                 \ ENTER ->     0 VARIABLE PARKING\                              \\ 'PARKING' is now initialized at '0'.\                        \ Invoking a variable places its address on the stack.\         \ To obtain the contents, we use the FORTH word '@' (at).\      \ ENTER ->     PARKING @\                                       \ This puts the current number of parking spaces used\          \ on the top of the stack:\                                     \ Let's 'GO' on to discuss variables further.\                  ;S                                                                                                               ;S RJT 80/11/03\\ FRAME #58   THOSE @!?+! VARIABLES   \                        \\ Sometimes you need to examine the value of the variable.\    \ The FORTH word '?' (question mark) prints the current value\  \\ of a variable.\                                              \ Using our previous example, let's find out the number of \    \ parking spaces used:\                                         \ ENTER ->     PARKING ?\                                       \\ We get '0' because we have not altered its value.\           \ Suppose we wanted to reserve 4 parking spaces.  We can\       \ alter the variable with the FORTH word '!' (store).\          \ ENTER ->     4 PARKING !\                                     \ Let's 'GO' on to discuss other 'VARIABLE' features.\          ;S                                                                                                                                                                                                                                               ;S RJT 80/11/03\\ FRAME #59   'PLUS' A WHOLE LOT MORE   \                      \ When incrementing a variable, we use the word '+!' \          \ (plus-store).  Using our previous example, let's add '2'\     \ to the '4' we reserved:\                                      \ ENTER ->     2 PARKING +!\                                    \ How many parking spaces have we used?\                        \ ENTER ->     PARKING ?\                                       \\ We should get '6'.\                                          \\ This concludes our discussion of 'CONSTANTS' and 'VARIABLES'.\ \ It has been said, 'The most common mistake of inexperienced\\ FORTH programmers is excessive use of variables'.  Try to\    \\ use the stack for variable information as much as possible!\ \ Please 'GO' on.\                                              ;S                                                                                                                                                                               ;S RJT 80/11/03\\ FRAME #60   LESSON 2 - SUMMARY   \                           \ We've reached another convenient place to stop and relax. \   \\ You should now be familiar with the following:\              \ - What constitutes a definition\                              \ - Both execution and compilation modes\                       \ - LOOPS and conditional logic\                                \\ - CONSTANTS and VARIABLES\                                   \ If you do not understand any of the above concepts,\          \ 'GO' on and we will review the material, otherwise\           \\ enter 'GOT-IT' and we will proceed to Lesson 4.\             \  NOTE: To fit the  GOING FORTH course onto a 5" diskette,\    \        the lesson on the FIG EDITOR, Lesson 3, was deleted.\  \        This should not be considered a significant loss as\   \        that lesson is not an interactive one but rather is\   \        simply descriptive material which reiterates the \     \        GLOSSARY descriptions of the EDITOR words.\ ;S         \\ FRAME #61   LESSON 2 REVIEW   \                              \ We will review the frame titles for Lesson 2.  Select the\    \ title which is in the area which you would like to \          \ review and enter the frame number when requested.  This \     \ will restart the presentation on that frame.  Feel free to\   \\ create your own examples to help in understanding.\          \\ To review Lesson 2 titles:\                                  \\ ENTER -> (CR)\                                               KEY DROP                                                         35 60   CONTENTS CR                                            \ ENTER  frame# and word 'FRAME' for desired review point.\     \ To resume with next lesson, ENTER   62 FRAME \                ;S                                                                                                                                                                                                                                                              \\ FRAME #62   LESSON 4 - PROGRAM DEVELOPMENT   \               \ This lesson provides you with some insights into\             \\ the effective generation of 'good' FORTH code.\              \ The example provided will hopefully reinforce the\            \\ concepts and tools from earlier lessons.\                    \ Enter 'GO' to proceedam thy 'WORD', thou shalt separate me by spaces.\    \   II.  Thou shalt not take named VARIABLES and CONSTANTS in\  \        vain.\ \  III.  Remember to keep holy thy nesting\     \        structure, nesting completely one into the other.\     \   IV.  Honor thy 'IF' with a 'THEN'.\                         \    V.  Thou shalt not kill thy STACK, by taking off more\     \        than thou put on.\                                     \   VI.  Thou shalt not commit unadulterated errors, by using\  \        compiling words outside a definition.\                 \  VII.  Thou shalt not steal an untested routine into a loop.\ \ VIII.  Thou shalt not bear false witness, by  using a\        \        'WORD' before it is defined.\                          \   IX.  Thou shalt covet a 'LOOP' and 'BEGIN...UNTIL' to\      \        execute at least once.\  \\    X.  Thou shalt covet a  screen with a 'FLUSH'.\ \ 'GO' & spread the word \  ;S          \\ FRAME #64   SUMMARY OF FORTH RULES   \                       \  1.  All FORTH words must be separated by at least one\       \      space.\                                                  \  2.  All words must be defined before they can be used.\      \  3.  Compiling words must never by used outside a\            \      definition. \                                            \  4.  Every 'IF' must be followed aby a 'THEN'.\               \  5.  When using the stack, remember LIFO (Last In First Out).\ \  6.  When 'NEST'ing, you must nest each structure\           \      completely within an outer structure.\                   \  7.  Never put an untested routine into a 'LOOP'.\            \  8.  Use 'VARIABLES' and 'CONSTANTS' with care.\              \  9.  Remember that all 'LOOP' and 'BEGIN...UNTIL'.\           \      structures execute at least once\                        \\ 10.  Remember to save your screen with a 'FLUSH'.\           \ Let's 'GO' on to try a program!\  ;S                          \\ FRAME #65   PROGRAM DEVELOPMENT   \                          \ Let's try writing a sample program to print your name in\     \ the middle of the screen, outlining the screen with *'s.\     \ To see what this will look like, let's invoke a sample\       \\ program name.  After it has printed, enter 'GO' to continue.\\\ First we will load our version of the program. \              \  WAIT A MOMENT \    74 LOAD                                  \\ The following will invoke the program\                                           \\ ENTER ->     .SCREEN\                                                                                    \ Your program should produce something like this.\             \ After contemplating this, please 'GO' on.\                    ;S                                                                                                                                                                                                                                                              \\ FRAME #66   WHERE DO I BEGIN...   \                          FORTH DEFINITIONS FORGET STAR                                   \ Of course there are numerous ways to program this.  The\      \ most obvious way is to print everything using only\           \ the dot-quote word ( ." ).\                                   \ Let's try to solve this another way. (Try combinations\       \ of 'LOOP', 'IF...THEN', 'CR', 'SPACES', and the dot-quote \   \\ word).\                                                      \ Let's make the frame 64 characters per line and 16 lines\     \ long.\                                                        \ You are on your own!  Try writing this program now.\          \ Don't forget the 'HELP' and 'CONTENTS' commands.\             \ When this program is written (or you give up), you may see\   \ our solution by typing\                                       5 SPACES  ."  74   LIST " CR                                    \ Then 'GO' on.\   ;S                                           \\ FRAME #67   FORTH STRUCTURED PROGRAMMING   \                 \ We have thus far discussed the concepts of FORTH and the\     \ rules governing their usage.  We will now briefly discuss\    \\ STRUCTURED PROGRAMMING techniques.\                          \ To STRUCTURE a program is to adhere to a common set of\       \\ guidelines for all programs.  STRUCTURE promotes clarity.\   \ STRUCTURE goes beyond physical organization.  It\             \\ implies logical relationships and control.\                  \ The guidelines are presented to help achieve program\         \ readability and efficiency.  Any situations not specifically\  \\ addressed should be handled with these goals in mind.\      \ Let's 'GO' on to list these guidelines.\                      ;S                                                                                                                                                                                                                                               ;S RJT 80/11/03\\ FRAME #68   GUIDELINES TO FORTH STRUCTURE   \                 \  1.  Use meaningful names.\                                   \  2.  Include a 'COMMENT' on line 0 of each screen.  Be\       \      descriptive, but brief. \                                \  3.  Use COMMENTS liberally to describe program code.\        \  4.  Define WORDS to perform repeated routines.\              \  5.  Group functionally related words together at the\        \      beginning of your program, using these modules as \      \      building blocks for future definitions.\                 \  6.  Align repetitive operands or conditions to enhance\      \      readability.\                                            \  7.  Use indentation whenever practical.\                     \  8.  Maintain control over your program by using 'DO..LOOP'\  \      or 'IF..THEN' clauses to selectively execute\            \      routines from top to bottom.\                           ;S                                                              \\ FRAME #69   COURSE SUMMARY   \                               \ You should now be aware of the basic concepts upon\           \ which FORTH is built.  Further understanding is\              \ available through the documentation that can be\              \ obtained from your FORTH supplier or the FORTH INTEREST GROUP\ \\ and, most important of all, through useage and experiment.\                                                                  \ tFORTH, tFORTH+, and firmFORTH are products of\               \    KENYON MICROSYSTEMS, Inc.\  \    3350 WALNUT BEND\         \    HOUSTON, TX  77042    [713] 978-6933\                      \ 68'FORTH is a product of\ \    TALBOT MICROSYSTEMS\           \    5030 KENSINGTON WAY\                                      \\    RIVERSIDE, CA 92507  [714] 781-0464\                       \ Both authored by RAY TALBOT\                                 FORTH DEFINITIONS  FORGET GOING     CR                           ." GOING HAS BEEN DELETED -- TO RERUN TYPE DR1 2 LOAD" ;S      (  .SCREEN  CODE )                                              FORTH DEFINITIONS                                               : STAR  ." *" ;              ( ONE STAR )                       : .2STARS  STAR 62 SPACES STAR CR ;   ( 2 STARS ON A LINE )     : .STARS  64 0 DO STAR LOOP CR ;        ( A LINE OF STARS )     : .NAME  STAR 26 SPACES ." YOUR NAME" 27 SPACES STAR CR ;                                       ( YOUR NAME IN THE MIDDLE )              ( YOU WILL WANT TO ADJUST THE NUMBER OF SPACES )                ( TO ACCOUNT FOR THE LENGTH OF YOUR NAME       )       : .SCREEN CR 16 0 DO I  0= IF .STARS ELSE                                            I 15 = IF .STARS ELSE                                           I  8 = IF .NAME  ELSE                                                    .2STARS THEN THEN THEN LOOP ;                              ;S                                                                                                                                                                     (  MULTI-FORTH  HELP  SUBSYSTEM                 013180 DRC)     FORTH DEFINITIONS  EDITOR                                         BASE @  DECIMAL                                                76  CONSTANT START-HELP    86   CONSTANT END-HELP              : HELP  ( TAG WORD, LOOKUP IN HELP BLOCKS, AND PRINT DEFIN *)       32 WORD  HERE C@ 2+ PAD C!  39 PAD 1+ C!  ( ENCLOSE WITH '')    HERE COUNT   PAD 2+ SWAP  CMOVE   39 PAD C@ PAD +  C!           END-HELP 2+ START-HELP               ( RANGE )                DO   FORTH I    END-HELP 1+ =    ( CURRENT SEARCH SCREEN )        EDITOR 0 R# ! IF ." NOT FOUND" QUIT ENDIF FORTH I SCR !           BEGIN  EDITOR 1LINE        ( SEARCH FOR TAGGED WORD )             IF  CR  #LAG  -TRAILING  TYPE  LEAVE  THEN                          1023   R#  @  <   END                                   LOOP   CR   0 R# ! ;   BASE !                               ;S                                                                                                               ;S RJT 80/11/04'HELP'   The HELP command enables the user to ask ( 052380 DRC) 'HELP'   to describe the function of any of the standard FORTH  'HELP'   words.  To use, enter the word "HELP", followed by     'HELP'   the word in question.  FORTH will look up the word     'HELP'   in the HELP dictionary and display the function of     'HELP'   the word in parenthesis along with a short english     'HELP'   description.  To understand the meaning of the symbols 'HELP'   inside the parenthesis, enter "HELP EXPLAIN".          'ME'  TYPE "HELP HELP" FOR EXPLANATION OF HELP COMMAND          'EDITOR' EDITOR is the name of the vocabulary containing the    'EDITOR'        text editor to modify screens.  In tFORTH the   'EDITOR'        word EDITOR is initialized so as to cause the   'EDITOR'        vocabulary to be loaded from disk, thereafter   'EDITOR'        it simply causes switch of CONTEXT.             '-->'   ( -> ) CONTINUE BY LOADING NEXT SCREEN                  'SP!' ( -> )   REINITIALIZE DATA STACK TO EMPTY                 ( MULTI-FORTH HELP DICTIONARY                 013080  DRC)      'EXPLAIN'   OPERAND KEY:                                        'EXPLAIN' N,N1,...   16-BIT SIGNED NUMBERS                      'EXPLAIN' D,D1,...   32-BIT SIGNED NUMBERS                      'EXPLAIN' U          16-BIT UNSIGNED NUMBER                     'EXPLAIN' ADDR       ADDRESS                                    'EXPLAIN' B          8-BIT BYTE                                 'EXPLAIN' C          7-BIT CHARACTER VALUE                      'EXPLAIN' F          BOOLEAN FLAG                               'EXPLAIN' ->         IMPLIES EXECUTION OF THE WORD              'DUP' ( N -> N N )     DUPLICATE TOP OF STACK                   'DROP' ( N -> )    THROW AWAY TOP OF STACK                      'SWAP' ( N1 N2 -> N2 N1 )    REVERSE TOP TWO STACK ITEMS        'OVER' ( N1 N2 -> N1 N2 N1 )    MAKE COPY OF SECOND ITEM ON TOP 'ROT' ( N1 N2 N3 -> N2 N3 N1 )    ROTATE THIRD ITEM TO TOP      '-DUP' ( N -> N ? )    DUPLICATE ONLY IF NON-ZERO               '>R' ( N -> )    MOVE TOP ITEM TO "RETURN STACK" FOR TEMPORARY  '>R'             STORAGE ( USE CAUTION AND MAINTAIN PAIRITY )   'R>' ( -> N )    RETRIEVE ITEM FROM RETURN STACK                'R'  ( -> N )    COPY TOP OF RETURN STACK ONTO STACK            'DECIMAL' ( -> )    SET DECIMAL BASE                            'HEX' ( -> )    SET HEXADECIMAL BASE                            'BASE' ( -> ADDR )    SYSTEM VARIABLE CONTAINING NUMBER BASE    '+' ( N1 N2 -> SUM )    ADD TWO TOP VALUES                      'D+' ( D1 D2 -> SUM )    ADD DOUBLE PRECISION                   '-' ( N1 N2 -> DIFF )    SUBTRACT N1 - N2                       '*' ( N1 N2 -> PROD )    MULTIPLY                               '/' ( N1 N2 -> QUOT )    DIVIDE N1 BY N2                        'MOD' ( N1 N2 -> REM )   MODULO ( IE. REMAINDER FROM DIVISION ) '/MOD' ( N1 N2 -> REM QUOT )    DIVIDE GIVING REMAINDER,QUOTIENT'*/MOD' ( N1 N2 N3 -> REM QUOT )    MULTIPLY, THEN DIVIDE WITH  '*/MOD'                            DOUBLE PRECISION INTERMEDIATE'*/' ( N1 N2 N3 -> QUOT)     LIKE */MOD, BUT GIVE QUOTIENT ONLY 'MAX' (N1 N2 -> MAX )    MAXIMUM                                'MIN' ( N1 N2 -> MIN )    MINIMUM                               'ABS' (N -> ABSOLUTE )    ABSOLUTE VALUE                        'DABS' ( D -> ABSOLUTE )    ABSOLUTE VALUE OF DOUBLE-PREC NUMBER'MINUS' ( N -> -N )    CHANGE SIGN                              'DMINUS' (D -> -D )    CHANGE SIGN OF DOUBLE-PREC NUMBER        'AND' ( N1 N2 -> AND )    LOGICAL AND (BITWISE)                 'OR' ( N1 N2 -> OR )    LOGICAL OR (BITWISE)                    'XOR' ( N1 N2 -> XOR )    LOGICAL EXCLUSIVE OR (BITWISE)        '<' (N1 N2 -> F )    TRUE IF N1 LESS THAN N2                    '>' ( N1 N2 -> F )    TRUE IF N1 GREATER THAN N2                '=' ( N1 N2 -> F )    TRUE IF TOP TWO NUMBERS ARE EQUAL         '0<' ( N -> F    )   TRUE IF TOP NUMBER NEGATIVE                '0=' ( N -> F )    TRUE IF TOP NUMBER ZERO ( IE, REVERSES       '0='               TRUTH VALUE )                                '@' ( ADDR -> N )    REPLACE WORD ADDRESS BY CONTENTS           '!' ( N ADDR -> )    STORE SECOND WORD AT ADDRESS ON TOP        'C@' ( ADDR -> B )    FETCH ONE BYTE ONLY                       'C!' (B ADDR -> )    STORE ONE BYTE ONLY                        '?' ( ADDR -> )    PRINT CONTENTS OF ADDRESS                    '+!' ( ADDR -> )    ADD SECOND # ON STACK TO CONTENTS OF ADDRESS'+!'                ON TOP                                      'CMOVE' ( FROM TO U -> )    MOVE U BYTES IN MEMORY              'FILL' ( ADDR U B -> )    FILL U BYTES IN MEMORY WITH B,        'FILL'                      BEGINNING AT ADDRESS                'ERASE' ( ADDR U -> )    FILL U BYTES IN MEMORY WITH ZEROES,    'ERASE'                    BEGINNING AT ADDRESS                 'BLANKS' ( ADDR U -> )    FILL U BYTES IN MEMORY WITH BLANKS,   'BLANKS'                     BEGINNING AT ADDRESS               '>IN' ( -> ADDR )    SYSTEM VARIABLE CONTAINING OFFSET INTO     '>IN'       INPUT BUFFER; USED, E.G. BY WORD     ;S RJT 80/11/04'DO' ( END+1 START -> )    SETS UP LOOP WITH GIVEN INDEX RANGE  'LOOP' ( -> )    ADDS 1 TO CURRENT LOOP INDEX AND  EXITS        'LOOP'            IF LIMIT IS REACHED                           'I' ( -> INDEX )    PLACES CURRENT DO...LOOP INDEX ON STACK     'LEAVE' ( -> )       TERMINATES LOOP AT NEXT LOOP OR +LOOP      '+LOOP' ( N -> )    ADDS STACK VALUE TO LOOP INDEX, AND EXITS   '+LOOP'              IF LIMIT IS REACHED                        'IF' ( F -> )    ON TRUE, CONTINUE EXECUTION, OTHERWISE         'IF'              SKIP TO NEXT "ELSE" OR "THEN"                 'ELSE' ( -> )    CONTINUE EXECUTION FOLLOWING FALSE "IF" TEST   'THEN' ( -> )    COMPLEATES "IF" CONTROL STRUCTURE              'BEGIN' ( -> )    MARKS START OF BEGIN...END OR                 'BEGIN'             BEGIN...WHILE...REPEAT STRUCTURE            'END' ( F -> )    ON FALSE, CONTINUES EXECUTION AFTER "BEGIN"   'WHILE' ( F -> )    ON FALSE, CONTINUES EXECUTION AFTER "REPEAT"'REPEAT' ( -> )    CONTINUES EXECUTION AFTER "BEGIN"            '.' ( N -> )    PRINT NUMBER                                    '.R' ( N FIELDWIDTH -> )    PRINT NUMBER, RIGHT-JUSTIFIED IN    '.R'                        FIELD                               'D.' ( D -> )    PRINT DOUBLE-PRECISION NUMBER                  'D.R' ( D FIELDWIDTH -> )    PRINT DOUBLE-PRECISION NUMBER      'D.R'                         RIGHT JUSTIFIED IN FIELD          'CR'  ( -> )    DO A CARRIAGE RETURN                            'SPACE' ( -> )    TYPE ONE SPACE                                'SPACES' ( N -> )    TYPE N SPACES                              '."' ( -> )    PRINT MESSAGE (TERMINATED BY " )                 'DUMP' ( ADDR U -> )    DUMP U WORDS STARTING AT ADDRESS        'TYPE' ( ADDR U -> )    TYPE STRING OF U CHARACTERS             'TYPE'                    STARTING AT ADDRESS                   'COUNT' ( ADDR -> ADDR+1 U )    CHANGE LENGTH-BYTE STRING       'COUNT'                          TO TYPE FORM                   '?TERMINAL' ( -> F )    TRUE IF TERMINAL BREAK REQUEST PRESENT  'KEY' ( -> C )    READ KEY, PUT ASCII VALUE ON STACK            'EMIT' ( C -> )    TYPE ASCII VALUE FROM STACK                  'EXPECT' ( ADDR N -> )    READ N CHARACTERS (OR UNTIL           'EXPECT'             CARRIAGE RETURN) FROM INPUT TO ADDRESS     'WORD' ( C -> )    READ ONE WORD FROM INPUT STREAM, USING       'WORD'      GIVEN CHARACTER (USUALLY BLANK)  AS DELIMITER       'NUMBER' ( ADDR -> D )    CONVERT STRING AT ADDRESS TO          'NUMBER'                  DOUBLE-PRECISION NUMBER               '<#' ( -> )    START OUTPUT STRING                              '#' ( D -> D )    CONVERT NEXT DIGIT OF DOUBLE-PRECISION #      '#'                  AND ADD CHARACTER TO OUTPUT STRING         '#S' ( D -> 0 0 )    CONVERT ALL SIGNIFICANT DIGITS OF DOUBLE   '"S'                 PRECISION NUMBER TO OUTPUT STRING          'SIGN' ( N D -> D )    INSERT SIGN OF N INTO OUTPUT STRING      '#>' ( D -> ADDR U )    TERMINATE OUTPUT STRING (READY FOR TYPE)'HOLD' ( C -> )    INSERT ASCII CHARACTER INTO OUTPUT STRING    'LIST' ( SCREEN -> )    LIST A DISK SCREEN                      'LOAD' ( SCREEN -> )    LOAD DISK SCREEN (COMPILE OR EXECUTE)   'BLOCK' ( BLOCK -> ADDR )    READ DISK BLOCK TO MEMORY ADDRESS  'B/BUF' ( -> N )    SYSTEM CONSTANT GIVING DISK BLOCK SIZE      'B/BUF'             IN BYTES                                    'BLK' ( -> ADDR )    SYSTEM VARIABLE CONTAINING CURRENT BLOCK # 'SCR' ( -> ADDR )    SYSTEM VARIABLE CONTAINING CURRENT SCREEN #'UPDATE' ( -> )    MARK LAST BUFFER ACCESSED AS UPDATED         'FLUSH' ( -> )    WRITE ALL UPDATED BUFFERS TO DISK             'EMPTY-BUFFERS' ( -> )    ERASE ALL BUFFERS                     ':' ( -> )    BEGIN COLON DEFINITION FOR THE FOLLOWING WORD     ';' ( -> )    END COLON DEFINITION                              'VARIABLE' ( N -> ) XXX: ( -> ADDR )   CREATE A VARIABLE NAMED  'VARIABLE'                   XXX WITH INITIAL VALUE N; RETURNS  'VARIABLE'                   ADDRESS WHEN EXECUTED              ';S' ( -> )  TERMINATES A SCREEN LOADING PROCESS ;S RJT 80/11/04'CONSTANT' (N -> )  XXX: ( -> N )    CREATE A CONSTANT NAMED XX 'CONSTANT'     WITH VALUE N; RETURNS VALUE WHEN EXECUTED        'CODE' ( -> )    BEGIN DEFINITION OF ASSEMBLY-LANGUAGE          'CODE'     PRIMITIVE OPERATION NAMED THE FOLLOWING WORD         ';CODE' ( -> )    USED TO CREATE A NEW DEFINING WORD, WITH      ';CODE'  EXECUTION-TIME "CODE ROUTINE" FOR THIS DATA            'CONTEXT' ( -> ADDR )    RETURNS ADDRESS OF POINTER TO          'CONTEXT'    CONTEXT VOCABULARY ( SEARCHED FIRST )              'CURRENT' ( -> )    RETURNS ADDRESS OF POINTER TO CURRENT       'CURRENT'        VOCABULARY (WHERE NEW DEFINITIONS ARE PUT)     'FORTH' ( -> )    MAIN FORTH VOCABULARY (EXECUTION OF FORTH     'FORTH'           SETS CONTEXT VOCABULARY)                      'EDITOR' ( -> )    EDITOR VOCABULARY; SETS CONTEXT              'ASSEMBLER' ( -> )    ASSEMBLER VOCABULARY; SETS                'ALLOT' ( N -> )    LEAVE A GAP OF N BYTES IN THE DICTIONARY    ',' ( N -> )    COMPILE A NUMBER INTO THE DICTIONARY            'DEFINITIONS' ( -> )    SETS CURRENT VOCABULARY TO CONTEXT      'VOCABULARY' ( -> )    CREATE NEW VOCABULARY NAMED THE FOLLOWING'VOCABULARY'           WORD                                     'VLIST' ( -> )    PRINT NAMES OF ALL WORDS IN CONTEXT VOCABULARY'(' ( -> )    BEGIN COMMENT, TERMINATED BY RIGHT PAREN ON SAME  '('        LINE; SPACE AFTER (                                  'FORGET' ( -> )    FORGET ALL DEFINITIONS BACK TO AND INCLUDING 'FORGET'             THE FOLLOWING WORD                         'ABORT' ( -> )    ERROR TERMINATION OF OPERATION                ''' ( -> ADDR )    FIND THE ADDRESS OF THE FOLLOWING WORD IN    '''        DICTIONARY; IF USED IF DEFINITION, COMPILE ADDRESS   'HERE' ( -> ADDR )    RETURNS ADDRESS OF NEXT UNUSED BYTE IN    'HERE'                THE DICTIONARY                            'PAD' ( -> ADDR )    RETURNS ADDRESS OF SCRATCH AREA (USUALLY   'PAD'                68 BYTES BEYOND HERE)                      'SP@' ( -> ADDR )    RETURNS ADDRESS OF TOP STAC ;S RJT 80/11/04"
                                                                                                                                                                                                                                                                                                                                                                                                                                                                                                                              