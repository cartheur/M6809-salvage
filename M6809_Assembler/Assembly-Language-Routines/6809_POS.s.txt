
;	Title:			Find the Position of a Substring
;	Name:			POS
;	Purpose:		Search for the first occurrence of a substring
;				in a string and return its starting index.
;				If the substring is not found, a 0 is returned.
;
;	Entry:			TOP OF STACK 
;				High byte of return address
;				Low  byte of return address 
;				High byte of substring address 
;				Low  byte of substring address 
;				High byte of string address 
;				Low  byte of string address
;				Each string consists of a length byte
;				followed by a maximum of 255 characters.
;
;	Exit:			If the substring is found then 
;				Register A = its starting index else
;				Register A = 0
;
;	Registers Used:		All
;
;	Time:			Since the algorithm is so data dependent
;				a simple formula is impossible but the
;				following statements are true and a
;				worst case is given below:
;
;				100 cycles overhead.
;				Each match of 1 character takes 20 cycles
;				A mismatch takes 58 cycles
;
;				Worst case timing occurs when the 
;				string and substring always match
;				except for the last character of the
;				substring, such as:
;				String    = 'AAAAAAAAAB'
;				substring = 'AAB'
;	Size:			Program	71 bytes
;				Data	2 stack bytes
;
POS:
	LDU	,S		; SAVE RETURN ADDRESS
	;
	;	EXIT, INDICATING SUBSTRING NOT FOUND, IF STRING OR SUBSTRING
	;	HAS ZERO LENGTH 0R IF SUBSTRING IS LONGER THAN STRING
	;
	CLRA			; INDICATE SUBSTRING NOT FOUND
	LDX	2,S		; GET BASE ADDRESS OF SUBSTRING
	LDY	4,S		; GET BASE ADDRESS OF STRING
	LDB	,y		; GET STRING LENGTH
	BEQ	EXITPO		; BRANCH(EXIT) IF STRING LENGTH IS ZERO 
	TST	,X		; CHECK SUBSTRING LENGTH
	BEQ	EXITPO		; BRANCH(EXIT) IF SUBSTRING LENGTH IS ZERO 
	SUBB	,X		; COMPARE STRING LENGTH, SUBSTRING LENGTH 
	BCS	EXITPO		; BRANCH(EXIT) IF SUBSTRING IS LONGER THAN
				; STRING
	;
	; SAVE INITIAL LOOP VARIABLES IN STACK
	; THESE ARE (BOTTOM TO TOP):
	; ADDRESS OF FIRST CHARACTER IN SUBSTRING
	; LENGTH OF PART OF STRING THAT MUST BE EXAMINED
	; LENGTH OF SUBSTRING
	; ADDRESS OF FIRST CHARACTER IN STRING (POINTER TO
	; INITIAL SECTION TO BE EXAMINED)
	;
	INCB			; LENGTH OF PART THAT MUST BE EXAMINED IS
				; STRING LENGTH SUBSTRING LENGTH + 1
				; REMAINDER IS T00 SHORT TO CONTAIN
				; SUBSTRING
	LDA	,X+		; GET SUBSTRING LENGTH, MOVE POINTER TO
				; FIRST CHARACTER IN SUBSTRING
	STX	2,S		; SAVE ADDRESS OF FIRST CHARACTER IN
				; SUBSTRING
	STD	,S		; SAVE LENGTHS IN STACK AS INITIAL VALUES
				; FOR COUNTERS
	PSHS	Y		; SAVE ADDRESS OF FIRST STRING BYTE
	;
	; SEARCH FOR SUBSTRING IN STRING
	; START SEARCH AT BASE OF STRING
	; CONTINUE UNTIL REMAINING STRING SHORTER THAN SUBSTRING
	;
CMPPOS:
	LDY	,S		; GET CURRENT STARTING POSITION IN STRING
	LDX	4,S		; GET BASE ADDRESS OF SUBSTRING
	LDB	2,S		; GET SUBSTRING LENGTH
	;
	; COMPARE BYTES OF SUBSTRING WITH BYTES OF STRING,
	; STARTING AT CURRENT POSITION IN STRING
	;
CHBYTE:
	LDA	,Y+		; GET BYTE OF STRING
	CMPA	,X+		; COMPARE TO BYTE OF SUBSTRING
	BNE	NOTFND
				; BRANCH IF NOT SAME, SUBSTRING NOT FOUND
	DECB			; CONTINUE THROUGH SUBSTRING
	BNE	CHBYTE
	;
	; SUBSTRING FOUND CALCULATE INDEX AT WHICH IT STARTS IN
	; STRING
	;
	LDD	,S		; GET STARTING ADDRESS OF SECTION CONTAINING
				; SUBSTRING
	SUBD	6,S		; SUBTRACT ADDRESS OF STRING'S LENGTH
				; BYTE. DIFFERENCE ENDS UP IN B
	TFR	B,A		; SAVE INDEX IN A
	BRA	REMTMP		; EXIT, REMOVING TEMPORARIES FROM STACK
	;
	; ARRIVE HERE IF SUBSTRING NOT FOUND
	; MOVE STRING POINTER UP 1 FOR NEXT COMPARISON
	; COUNT NUMBER OF COMPARISGNS
	;
NOTFND:
	LDD	,S		; MOVE CURRENT (STARTING) POSITION IN
	ADDD	#1		; STRING UP 1 CHARACTER
	STD	,S
	DEC	3,S		; SEARCH THROUGH SECTION OF STRING
	BNE	CMPPOS		; THAT COULD CONTAIN SUBSTRING
	CLRA			; SUBSTRING NOT FOUND AT ALL MAKE
				; STARTING INDEX ZERO
	;
	; REMOVE TEMPORARY STORAGE, PARAMETERS FROM STACK AND EXIT
	;
REMTMP:
	LEAS	2,S		; REMOVE TEMPORARIES FROM STACK
EXITPO:
	LEAS	6,S		; REMOVE PARAMETERS FROM STACK
	JMP	,U		; EXIT TO RETURN ADDRESS
;
;	SAMPLE EXECUTION:
;
SC5C:
	LDY	#STG		; GET BASE ADDRESS OF STRING
	LDX	#SSTG		; GET BASE ADDRESS OF SUBSTRING
	PSHS	X,Y		; SAVE PARAMETERS IN STACK
	JSR	POS		; FIND POSITION OF SUBSTRING
; SEARCHING "AAAAAAAAAB" FOR "AAB"
; RESULTS IN REGISTER A=8
	BRA	SC5C		; LOOP THROUGH TEST
;
;	TEST DATA
;
STG:	FCB	$0A		; LENGTH OF STRING
	FCC	"AAAAAAAAAB                      "	; 32 BYTE MAX
SSTG:	FCB	3		; LENGTH OF SUBSTRING
	FCC	"AAB                             "	; 32 BYTE MAX
    
	END
