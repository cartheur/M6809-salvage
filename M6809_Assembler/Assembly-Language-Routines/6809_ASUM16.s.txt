;	Title:			Array Summation
;	Name:			ASUM16
;	Purpose:		Sum the elements of an array, yielding a 24 bit result. 
;				Maximum size is 255 16-bit elements. 
;	Entry:			Register X = Base address of array
;				Register A = Size of array (in 16-bit words) 
;	Exit:			Register A = High byte of sum
;				Register X = Middle and low bytes of sum 
;	Registers Used:		A,B,CC,X,Y
;	Time:			Approximately 20 cycles per element
;				plus 44 cycles overhead 
;
;	Size:			Program		27 bytes
;				Data:		1 stack byte
ASUM16:
	;
	; TEST ARRAY LENGTH
	; EXIT WITH SUM = 0 IF ARRAY HAS NO ELEMENTS
	;
	TFR	A,B		; MOVE ARRAY LENGTH TO B

	CLRA			; EXTEND ARRAY LENGTH TO 16 BITS
	STA	,-S		; MAKE MSB OF SUM ZERO
	TSTB			; CHECK ARRAY LENGTH
	BEQ	EXITS1		; BRANCH (EXIT) IF ARRAY LENGTH IS ZERO
				; SUM IS ZERO IN THIS CASE
	;
	;	ADD WORDLENGTH ELEMENTS TO LOW BYTES OF SUM ONE AT A TIME
	;	ADD 1 TO HIGH BYTE OF SUM WHENEVER A CARRY OCCURS
	;
	TFR	D,Y		; MOVE ARRAY LENGTH TO Y
	CLRB			; START SUM AT ZERO
				; (REMEMBER A IS ALREADY ZERO) 
SUMLP:
	ADDD	,X++		; ADD ELEMENT TO LOW BYTES OF SUM
	BCC	DECCNT		; BRANCH IF NO CARRY
	INC	,S		; ELSE ADD 1 TO HIGH BYTE OF SUM
DECCNT:
	LEAY	-1,Y		; CONTINUE THROUGH ALL ELEMENTS
	BNE	SUMLP
	;
	;	MOVE SUM TO A (MOST SIGNIFICANT BYTE)
	;	AND X (LESS SIGNIFICANT BYTES)
	;
EXITS1:
	TFR	D,X		; SAVE LOW BYTES OF SUM IN X
	LDA	,S+		; MOVE HIGH BYTE OF SUM TO A
	RTS
;
; SAMPLE EXECUTION
;
SC6B:	LDX	#BUF		; GET BASE ADDRESS 0F BUFFER
	LDA	BUFSZ		; GET SIZE OF BUFFER IN WORDS
	JSR	ASUM16		; SUM WORDLENGTH ELEMENTS IN BUFFER
				; SUM OF TEST DATA IS 31FF8 HEX,
				; REGISTER X = 1FF8H
				; REGISTER A = 3
	BRA	SC6B		; LOOP FOR ANOTHER TEST
;
; TEST DATA, CHANGE FOR OTHER VALUES
;
	SIZE	EQU	$10	; SIZE OF BUFFER IN WORDS
BUFSZ:
	FCB	SIZE		; SIZE OF BUFFER IN WORDS
;
BUF:				; BUFFER DECIMAL ELEMENTS ARE
	FDB	0		; 0,
	FDB	$111		; 273,546,819,1092
	FDB	$222		; 1365,1638,1911,2184,2457,2730,3003,3276
	FDB	$333		; 56797,61166,65535
	FDB	$444		;
	FDB	$555		;
	FDB	$666		;
	FDB	$777		;
	FDB	$888		;
	FDB	$999		;
	FDB	$AAA		;
	FDB	$BBB		;
	FDB	$CCC		;
	FDB	$DDDD		;
	FDB	$EEEE		;
	FDB	$FFFF		; SUM = 31FF8 (204792 DECIMAL)

	END

